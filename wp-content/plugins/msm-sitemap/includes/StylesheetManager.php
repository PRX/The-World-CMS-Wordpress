<?php
/**
 * StylesheetManager.php
 *
 * @package Automattic\MSM_Sitemap
 */

declare(strict_types=1);

namespace Automattic\MSM_Sitemap;

/**
 * Manages MSM-specific stylesheet modifications and references.
 *
 * This class handles the integration with WordPress core stylesheets,
 * providing MSM-specific branding and namespace support.
 *
 * @package Automattic\MSM_Sitemap
 */
class StylesheetManager {

	/**
	 * Initialize stylesheet management.
	 */
	public static function setup(): void {
		// Register our own XSL endpoints to avoid dependency on core sitemaps
		add_action( 'init', array( __CLASS__, 'register_xsl_endpoints' ) );
		add_action( 'template_redirect', array( __CLASS__, 'handle_xsl_requests' ) );
	}

	/**
	 * Register XSL endpoints for MSM sitemaps.
	 */
	public static function register_xsl_endpoints(): void {
		// Add rewrite rules for our XSL files
		add_rewrite_rule( '^msm-sitemap\.xsl$', 'index.php?msm-sitemap-stylesheet=sitemap', 'top' );
		add_rewrite_rule( '^msm-sitemap-index\.xsl$', 'index.php?msm-sitemap-stylesheet=index', 'top' );
		
		// Add query vars
		add_filter( 'query_vars', array( __CLASS__, 'add_query_vars' ) );
	}

	/**
	 * Add query variables for XSL endpoints.
	 *
	 * @param array $vars Existing query variables.
	 * @return array Modified query variables.
	 */
	public static function add_query_vars( array $vars ): array {
		$vars[] = 'msm-sitemap-stylesheet';
		return $vars;
	}

	/**
	 * Handle XSL requests for MSM sitemaps.
	 */
	public static function handle_xsl_requests(): void {
		$stylesheet_type = get_query_var( 'msm-sitemap-stylesheet' );
		
		if ( ! $stylesheet_type ) {
			return;
		}

		// Set proper headers
		header( 'Content-Type: application/xml; charset=UTF-8' );
		
		if ( 'sitemap' === $stylesheet_type ) {
			// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- XSL content is properly escaped in generation
			echo self::get_msm_sitemap_stylesheet();
		} elseif ( 'index' === $stylesheet_type ) {
			// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- XSL content is properly escaped in generation
			echo self::get_msm_sitemap_index_stylesheet();
		}
		
		exit;
	}

	/**
	 * Get XSL stylesheet reference for individual sitemaps.
	 *
	 * @return string XSL stylesheet reference for sitemap.
	 */
	public static function get_sitemap_stylesheet_reference(): string {
		/**
		 * Filters whether to include XSL stylesheet reference in sitemap XML.
		 *
		 * @since 1.5.0
		 *
		 * @param bool $include_xsl Whether to include XSL stylesheet reference. Default true.
		 */
		if ( ! apply_filters( 'msm_sitemap_include_xsl_reference', true ) ) {
			return '';
		}

		return "\n" . '<?xml-stylesheet type="text/xsl" href="' . home_url( '/msm-sitemap.xsl' ) . '"?>' . "\n";
	}

	/**
	 * Get XSL stylesheet reference for sitemap index.
	 *
	 * @return string XSL stylesheet reference for sitemap index.
	 */
	public static function get_index_stylesheet_reference(): string {
		/**
		 * Filters whether to include XSL stylesheet reference in sitemap index XML.
		 *
		 * @since 1.5.0
		 *
		 * @param bool $include_xsl Whether to include XSL stylesheet reference. Default true.
		 */
		if ( ! apply_filters( 'msm_sitemap_include_xsl_reference', true ) ) {
			return '';
		}

		return "\n" . '<?xml-stylesheet type="text/xsl" href="' . home_url( '/msm-sitemap-index.xsl' ) . '"?>' . "\n";
	}

	/**
	 * Get MSM-specific sitemap stylesheet content.
	 *
	 * @return string XSL content for MSM sitemaps.
	 */
	public static function get_msm_sitemap_stylesheet(): string {
		$css         = self::get_stylesheet_css();
		$title       = esc_xml( __( 'XML Sitemap', 'msm-sitemap' ) );
		$description = esc_xml( __( 'This XML Sitemap is generated by Metro Sitemap to make your content more visible for search engines.', 'msm-sitemap' ) );
		$learn_more  = sprintf(
			'<a href="%s">%s</a>',
			esc_url( __( 'https://www.sitemaps.org/', 'msm-sitemap' ) ),
			esc_xml( __( 'Learn more about XML sitemaps.', 'msm-sitemap' ) )
		);

		$text = sprintf(
			/* translators: %s: Number of URLs. */
			esc_xml( __( 'Number of URLs in this XML Sitemap: %s.', 'msm-sitemap' ) ),
			'<xsl:value-of select="count( sitemap:urlset/sitemap:url )" />'
		);

		$lang       = get_language_attributes( 'html' );
		$url        = esc_xml( __( 'URL', 'msm-sitemap' ) );
		$lastmod    = esc_xml( __( 'Last Modified', 'msm-sitemap' ) );
		$changefreq = esc_xml( __( 'Change Frequency', 'msm-sitemap' ) );
		$priority   = esc_xml( __( 'Priority', 'msm-sitemap' ) );

		$xsl_content = <<<XSL
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
		version="1.0"
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:sitemap="http://www.sitemaps.org/schemas/sitemap/0.9"
		xmlns:n="http://www.google.com/schemas/sitemap-news/0.9"
		xmlns:image="http://www.google.com/schemas/sitemap-image/1.1"
		exclude-result-prefixes="sitemap n image"
		>

	<xsl:output method="html" encoding="UTF-8" indent="yes" />

	<!--
	  Set variables for whether lastmod, changefreq or priority occur for any url in the sitemap.
	  We do this up front because it can be expensive in a large sitemap.
	  -->
	<xsl:variable name="has-lastmod"    select="count( /sitemap:urlset/sitemap:url/sitemap:lastmod )"    />
	<xsl:variable name="has-changefreq" select="count( /sitemap:urlset/sitemap:url/sitemap:changefreq )" />
	<xsl:variable name="has-priority"   select="count( /sitemap:urlset/sitemap:url/sitemap:priority )"   />

	<xsl:template match="/">
		<html {$lang}>
			<head>
				<title>{$title}</title>
				<style>
					{$css}
				</style>
			</head>
			<body>
				<div id="sitemap">
					<div id="sitemap__header">
						<h1>{$title}</h1>
						<p>{$description}</p>
						<p>{$learn_more}</p>
					</div>
					<div id="sitemap__content">
						<p class="text">{$text}</p>
						<table id="sitemap__table">
							<thead>
								<tr>
									<th class="loc">{$url}</th>
									<xsl:if test="\$has-lastmod">
										<th class="lastmod">{$lastmod}</th>
									</xsl:if>
									<xsl:if test="\$has-changefreq">
										<th class="changefreq">{$changefreq}</th>
									</xsl:if>
									<xsl:if test="\$has-priority">
										<th class="priority">{$priority}</th>
									</xsl:if>
								</tr>
							</thead>
							<tbody>
								<xsl:for-each select="sitemap:urlset/sitemap:url">
									<tr>
										<td class="loc"><a href="{sitemap:loc}"><xsl:value-of select="sitemap:loc" /></a></td>
										<xsl:if test="\$has-lastmod">
											<td class="lastmod"><xsl:value-of select="sitemap:lastmod" /></td>
										</xsl:if>
										<xsl:if test="\$has-changefreq">
											<td class="changefreq"><xsl:value-of select="sitemap:changefreq" /></td>
										</xsl:if>
										<xsl:if test="\$has-priority">
											<td class="priority"><xsl:value-of select="sitemap:priority" /></td>
										</xsl:if>
									</tr>
								</xsl:for-each>
							</tbody>
						</table>
					</div>
				</div>
			</body>
		</html>
	</xsl:template>
</xsl:stylesheet>

XSL;

		/**
		 * Filters the content of the MSM sitemap stylesheet.
		 *
		 * @since 1.5.0
		 *
		 * @param string $xsl_content Full content for the XML stylesheet.
		 */
		return apply_filters( 'msm_sitemaps_stylesheet_content', $xsl_content );
	}

	/**
	 * Get MSM-specific sitemap index stylesheet content.
	 *
	 * @return string XSL content for MSM sitemap index.
	 */
	public static function get_msm_sitemap_index_stylesheet(): string {
		$css         = self::get_stylesheet_css();
		$title       = esc_xml( __( 'XML Sitemap', 'msm-sitemap' ) );
		$description = esc_xml( __( 'This XML Sitemap Index is generated by Metro Sitemap to make your content more visible for search engines.', 'msm-sitemap' ) );
		$learn_more  = sprintf(
			'<a href="%s">%s</a>',
			esc_url( __( 'https://www.sitemaps.org/', 'msm-sitemap' ) ),
			esc_xml( __( 'Learn more about XML sitemaps.', 'msm-sitemap' ) )
		);

		$text = sprintf(
			/* translators: %s: Number of URLs. */
			esc_xml( __( 'Number of URLs in this XML Sitemap: %s.', 'msm-sitemap' ) ),
			'<xsl:value-of select="count( sitemap:sitemapindex/sitemap:sitemap )" />'
		);

		$lang    = get_language_attributes( 'html' );
		$url     = esc_xml( __( 'URL', 'msm-sitemap' ) );
		$lastmod = esc_xml( __( 'Last Modified', 'msm-sitemap' ) );

		$xsl_content = <<<XSL
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
		version="1.0"
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:sitemap="http://www.sitemaps.org/schemas/sitemap/0.9"
		exclude-result-prefixes="sitemap"
		>

	<xsl:output method="html" encoding="UTF-8" indent="yes" />

	<!--
	  Set variables for whether lastmod occurs for any sitemap in the index.
	  We do this up front because it can be expensive in a large sitemap.
	  -->
	<xsl:variable name="has-lastmod" select="count( /sitemap:sitemapindex/sitemap:sitemap/sitemap:lastmod )" />

	<xsl:template match="/">
		<html {$lang}>
			<head>
				<title>{$title}</title>
				<style>
					{$css}
				</style>
			</head>
			<body>
				<div id="sitemap">
					<div id="sitemap__header">
						<h1>{$title}</h1>
						<p>{$description}</p>
						<p>{$learn_more}</p>
					</div>
					<div id="sitemap__content">
						<p class="text">{$text}</p>
						<table id="sitemap__table">
							<thead>
								<tr>
									<th class="loc">{$url}</th>
									<xsl:if test="\$has-lastmod">
										<th class="lastmod">{$lastmod}</th>
									</xsl:if>
								</tr>
							</thead>
							<tbody>
								<xsl:for-each select="sitemap:sitemapindex/sitemap:sitemap">
									<tr>
										<td class="loc"><a href="{sitemap:loc}"><xsl:value-of select="sitemap:loc" /></a></td>
										<xsl:if test="\$has-lastmod">
											<td class="lastmod"><xsl:value-of select="sitemap:lastmod" /></td>
										</xsl:if>
									</tr>
								</xsl:for-each>
							</tbody>
						</table>
					</div>
				</div>
			</body>
		</html>
	</xsl:template>
</xsl:stylesheet>

XSL;

		/**
		 * Filters the content of the MSM sitemap index stylesheet.
		 *
		 * @param string $xsl_content Full content for the XML stylesheet.
		 */
		return apply_filters( 'msm_sitemaps_stylesheet_index_content', $xsl_content );
	}

	/**
	 * Gets the CSS to be included in sitemap XSL stylesheets.
	 *
	 * @return string The CSS.
	 */
	public static function get_stylesheet_css(): string {
		$text_align = is_rtl() ? 'right' : 'left';

		$css = <<<EOF

					body {
						font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
						color: #444;
					}

					#sitemap {
						max-width: 980px;
						margin: 0 auto;
					}

					#sitemap__table {
						width: 100%;
						border: solid 1px #ccc;
						border-collapse: collapse;
					}

			 		#sitemap__table tr td.loc {
						/*
						 * URLs should always be LTR.
						 * See https://core.trac.wordpress.org/ticket/16834
						 * and https://core.trac.wordpress.org/ticket/49949
						 */
						direction: ltr;
					}

					#sitemap__table tr th {
						text-align: {$text_align};
					}

					#sitemap__table tr td,
					#sitemap__table tr th {
						padding: 10px;
					}

					#sitemap__table tr:nth-child(odd) td {
						background-color: #eee;
					}

					a:hover {
						text-decoration: none;
					}

EOF;

		/**
		 * Filters the CSS only for the sitemap stylesheet.
		 *
		 * @param string $css CSS to be applied to default XSL file.
		 */
		return apply_filters( 'msm_sitemaps_stylesheet_css', $css );
	}
} 
